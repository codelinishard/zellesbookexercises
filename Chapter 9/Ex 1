#minimal changes. replaced n for final print with winsA + winsB
# n now counts best of, so best of 7 runs for 7 matches at most
# if a premature lead of best of total/2 +1 (if even) or total/2 rounded (if odd) is reached, the simNGames terminates prematurely
# rball.py
from random import random

def main():
    printIntro()
    probA, probB, n = getInputs()
    winsA, winsB = simNGames(n, probA, probB)
    printSummary(winsA, winsB)

def printIntro():
    print("This program simulates a game of racquetball between two")
    print('players called "A" and "B". The abilities of each player is')
    print("indicated by a probability (a number between 0 and 1) that")
    print("the player wins the point when serving. Player A always")
    print("has the first serve.")

def getInputs():
    # Returns the three simulation parameters
    a = float(input("What is the prob. player A wins a serve? "))
    b = float(input("What is the prob. player B wins a serve? "))
    n = int(input("Best of how many games? "))
    return a, b, n

def simNGames(n, probA, probB):
    # Simulates max n games of racquetball between players whose
    # abilities are represented by the probability of winning a serve.
    # Returns number of wins for A and B
    winsA = 0
    winsB = 0
    for i in range(n):
        if i%2 == 0:
            firstserve = "B"
        else:
            firstserve = "A"
        scoreA, scoreB = simOneGame(probA, probB,firstserve)
        if scoreA > scoreB:
            winsA = winsA + 1
        else:
            winsB = winsB + 1
        if n%2 == 0:
            # If n is even, winner need to win at least half of the games so +1 is needed
            if winsA >= round(n/2+1) or winsB >= round(n/2+1):
                return winsA, winsB
        else:
            if winsA >= round(n/2) or winsB >= round(n/2):
                return winsA, winsB
    return winsA, winsB

def simOneGame(probA, probB,firstserve):
    # Simulates a single game of racquetball between players whose
    # abilities are represented by the probability of winning a serve.
    # Returns final scores for A and B
    serving = firstserve
    scoreA = 0
    scoreB = 0
    while not gameOver(scoreA, scoreB):
        if serving == "A":
            if random() < probA:
                scoreA = scoreA + 1
            serving = "B"
        else:
            if random() < probB:
                scoreB = scoreB + 1
            serving = "A"
    return scoreA, scoreB

def gameOver(a, b):
    # a and b represent scores for a racquetball game
    # Returns True if the game is over, False otherwise.
    return a==15 or b==15

def printSummary(winsA, winsB):
    # Prints a summary of wins for each player.
    n = winsA + winsB
    print("\nGames simulated:", winsA + winsB)
    print("Wins for A: {0} ({1:0.1%})".format(winsA, winsA/n))
    print("Wins for B: {0} ({1:0.1%})".format(winsB, winsB/n))

if __name__ == '__main__': main()
