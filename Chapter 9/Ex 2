# rball.py
from random import random

def main():
    printIntro()
    probA, probB, n = getInputs()
    winsA, winsB, Ashutouts, Bshutouts = simNGames(n, probA, probB)
    printSummary(winsA, winsB,Ashutouts,Bshutouts)

def printIntro():
    print("This program simulates a game of racquetball between two")
    print('players called "A" and "B". The abilities of each player is')
    print("indicated by a probability (a number between 0 and 1) that")
    print("the player wins the point when serving. Player A always")
    print("has the first serve.")
    print("A shutout occurs when the winner is the only player to score and by 7 points.")

def getInputs():
    # Returns the three simulation parameters
    a = float(input("What is the prob. player A wins a serve? "))
    b = float(input("What is the prob. player B wins a serve? "))
    n = int(input("Best of how many games? "))
    return a, b, n

def simNGames(n, probA, probB):
    # Simulates max n games of racquetball between players whose
    # abilities are represented by the probability of winning a serve.
    # Returns number of wins for A and B
    winsA = 0
    winsB = 0
    Ashutouts = 0
    Bshutouts = 0  
    for i in range(n):
        if i%2 == 0:
            firstserve = "A"
        else:
            firstserve = "B"
        scoreA, scoreB, isshutout = simOneGame(probA, probB,firstserve)
        if scoreA > scoreB:
            winsA = winsA + 1
        else:
            winsB = winsB + 1

        if isshutout == 1:
            Ashutouts += 1
        elif isshutout == 2:
            Bshutouts += 1

        if n%2 == 0:
            # If n is even, winner need to win at least half of the games so +1 is needed
            if winsA >= round(n/2+1) or winsB >= round(n/2+1):
                return winsA, winsB, Ashutouts, Bshutouts
            
        else:
            if winsA >= round(n/2) or winsB >= round(n/2):
                return winsA, winsB, Ashutouts, Bshutouts
            
    return winsA, winsB, Ashutouts, Bshutouts

def simOneGame(probA, probB, firstserve):
    # Simulates a single game of racquetball between players whose
    # abilities are represented by the probability of winning a serve.
    # Returns final scores for A and B
    serving = firstserve
    scoreA = 0
    scoreB = 0
    while not gameOver(scoreA, scoreB) or shutout(scoreA, scoreB):
        if serving == "A":
            if random() < probA:
                scoreA = scoreA + 1
            else: serving = "B"
        else:
            if random() < probB:
                scoreB = scoreB + 1
            else: serving = "A"
        if shutout(scoreA, scoreB):
            if scoreA == 7:
                return scoreA, scoreB, 1
            elif scoreB == 7:
                return scoreA, scoreB, 2
    return scoreA, scoreB, 0

def shutout(a, b):
    return (a==7 and b==0) or (b==7 and a==0)

def gameOver(a, b):
    # a and b represent scores for a racquetball game
    # Returns True if the game is over, False otherwise.
    return a==15 or b==15

def printSummary(winsA, winsB,Ashutouts,Bshutouts):
    # Prints a summary of wins for each player.
    n = winsA + winsB
    print("\nGames simulated:", winsA + winsB)
    print("Wins for A: {0} ({1:0.1%})".format(winsA, winsA/n))
    print("Shutouts by A: {0}".format(Ashutouts))
    if winsA > 0: print("Percentage of wins by A that were shutouts: {0:0.1%}".format(Ashutouts/winsA))
    print("Wins for B: {0} ({1:0.1%})".format(winsB, winsB/n))
    print("Shutouts by B: {0}".format(Bshutouts))
    if winsB > 0: print("Percentage of wins by B that were shutouts: {0:0.1%}".format(Bshutouts/winsB))

if __name__ == '__main__': main()
